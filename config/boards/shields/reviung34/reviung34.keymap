/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#include "../../../zmk-nodefree-config/keypos_def/keypos_34keys.h"
#include "../../../zmk-nodefree-config/helper.h"

#define DEFAULT 0
#define SYM 1
#define NAV 2
#define CONFIG 3
// #define _LOWER 3
// #define _RAISE 4
#define FUN 5
#define NUMPAD 6
#define NUMWORD 7
#define MEDIA 8
#define MOUSE 9
#define GAME 10
#define WNAV 11
#define EMAILS 12
#define ADJUST 13

#define XXXXXXX &none
#define _______ &trans

// Home row mods macros
#define MALT(k) &hrm LALT k
#define MSFT(k) &hrm LSHFT k
#define MCTL(k) &hrm LCTRL k
#define MGUI(k) &hrm LGUI k
#define MCS(k) &mt LC(LSHFT) k
#define MCA(k) &mt LC(LALT) k

#define CANCEL &mo DEFAULT

// combos
//#undef COMBO_TERM
//#define COMBO_TERM 40  // timeout of 40ms (default is 30ms if omitted)
ZMK_COMBO(combo_bspc,  &kp BSPC, RT2 RT3, ALL)
ZMK_COMBO(combo_del,   &kp DEL, LT2 LT3, ALL)
//ZMK_COMBO(combo_copy,   &kp LC(C),  LB2 LB3, ALL)
//ZMK_COMBO(combo_paste,  &kp LC(V),  LB1 LB2, ALL)


// tap dance
ZMK_BEHAVIOR(td_parens, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LPAR>, <&kp RPAR>;
)
ZMK_BEHAVIOR(td_bracket, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LBKT>, <&kp RBKT>;
)
ZMK_BEHAVIOR(td_cbrace, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LBRC>, <&kp RBRC>;
)
ZMK_BEHAVIOR(td_dotcom, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp DOT>, <&kp COMMA>;
)
// send string macros
ZMK_BEHAVIOR(ss_mailp, macro,
    wait-ms = <30>;
    tap-ms = <40>;
    bindings = <&kp M &kp O &kp R &kp A &kp L &kp E &kp S &kp DOT &kp G &kp E &kp R &kp M &kp A &kp N &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M >;
)

/ {
    macros {
            ZMK_MACRO(save,
              wait-ms = <30>;
              tap-ms = <40>;
              bindings =  <&macro_tap &kp ESC &kp COLON &kp W &kp RET>;
            )
    };

    behaviors {
        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <100>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            // global-quick-tap; // <--- makes I'm really hard to type
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
    XXXXXXX    MALT(W)    &kp E      &kp R        &kp T     &kp Y     &kp U            &kp I      MALT(O)    XXXXXXX
    MSFT(A)    &kp S      &kp D      MCTL(F)      &kp G     &kp H     MCTL(J)          &kp K      &kp L      MSFT(P)
    MCS(Q)     MCA(X)     &kp C      MGUI(V)      &kp B     &kp N     MGUI(M)          &kp COMMA  MCA(DOT)   MCS(Z)
                                     &sl SYM      XXXXXXX   XXXXXXX   &lt NAV SPACE
                        >;
                };

                sym_layer {
                        bindings = <
    _______    &kp AT     &kp HASH   &kp DLLR   &kp PRCNT  &kp CARET  &kp AMPS   &kp ASTRK  &td_parens   _______
    &kp GRAVE  &kp DQT    _______    &kp EXCL   _______    _______    &kp MINUS  &kp EQUAL  &td_cbrace   &kp SEMI
    &kp TILDE  &kp SQT    &kp BSLH   &kp PIPE   &sl MEDIA  &sl FUN    &kp UNDER  &kp PLUS   &td_bracket  &kp FSLH
                                     CANCEL     XXXXXXX    XXXXXXX    _______
                        >;
                };

                media_layer {
                        bindings = <
    _______    _______    _______    &kp C_BRI_UP  _______     _______     _______       _______        _______      _______
    _______    _______    _______    &kp C_BRI_DN  _______     &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP   &kp C_NEXT   &kp C_STOP
    _______    _______    _______    _______       _______     _______     _______       _______        _______      _______
                                     &kp C_NEXT    XXXXXXX     XXXXXXX     &kp C_PP
                            >;
                };

                fun_layer {
                        bindings = <
    _______    _______    _______    _______    _______    _______    _______    _______    _______    _______
    _______    _______    _______    _______    _______    _______    _______    _______    _______    _______
    _______    _______    _______    _______    _______    _______    _______    _______    _______    _______
                                     _______    XXXXXXX    XXXXXXX    _______
                        >;
                };

                nav_layer {
                        bindings = <
    _______    &kp PG_DN  &kp UP     &kp PG_UP  _______    _______    /* SC_TAB */_______    _______  /* C_TAB */_______      _______
    &kp HOME   &kp LEFT   &kp DOWN   &kp RIGHT  &kp END    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  _______
    &mo NAV    _______    _______    _______    _______    &kp INS    &kp HOME   &kp PG_DN  &kp PG_UP  &kp END
                                     CANCEL     XXXXXXX    XXXXXXX    _______
                           >;
                };



               numpad_layer  {
                        bindings = <
    _______    _______   _______   _______   _______   &kp KP_NUMLOCK    &kp KP_N7  &kp KP_N8  &kp KP_N9  _______
    _______    _______   _______   _______   _______   &kp KP_PLUS       &kp KP_N4  &kp KP_N5  &kp KP_N6  &td_dotcom
    &mo NUMPAD _______   _______   _______   _______   &kp KP_ASTERISK   &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp FSLH
                                   CANCEL    XXXXXXX    XXXXXXX          &kp KP_N0
                        >;
                };

               wnav_layer  {
                        bindings = <
    _______    &kp LA(TAB)    &kp LG(TAB)  _______    _______    &kp LG(LEFT) &kp LG(DOWN) &kp LG(UP) &kp LG(RIGHT) _______
    &kp LG(N6) &kp LG(N4)     &kp LG(N0)   &kp LG(N2) _______    _______      &kp LG(N3)   &kp LG(N1) &kp LG(N5)    &kp LG(N7)
    _______    _______        _______      &kp LG(N8) _______    _______      &kp LG(N9)   _______    _______       _______
                                           CANCEL     XXXXXXX    XXXXXXX      _______
                            >;
                };

               emails_layer  {
                        bindings = <
    _______    _______    _______    _______    _______    _______    &ss_mailp _______    _______    _______
    _______    _______    _______    _______    _______    _______    _______    _______    _______    _______
    _______    _______    _______    _______    _______    _______    _______    _______    _______    _______
                                     _______    XXXXXXX    XXXXXXX    _______
                        >;
                };

                config_layer {
// -----------------------------------------------------------------------------------------
// | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | BT1  | BT2 | BT3 | BT4 |
// | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI+ |    | BT5   |       |     |     |
// |          |          |          | RGB TOG  |    | BT CLR |     |     | RESET     |
//                                             |     |     |     |     |     |
                        bindings = <
   &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &none &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3
   &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &none &none &bt BT_SEL 4 &bt BT_NXT &bt BT_PRV        &none
   &none           &none           &none           &rgb_ug RGB_TOG &none &none &bt BT_CLR   &none &out OUT_TOG        &reset
                                                             &kp CAPS      &trans               &trans      &trans
                        >;
                };
        };
};
